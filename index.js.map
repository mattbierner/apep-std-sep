{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AACb,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE5B,IAAM,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG;QAAC,KAAK,yDAAG,EAAE;WACxC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,CACnD,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,EAAK;AACd,SAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,wBAAwB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AACnD,eAAO,CAAC,CAAC;KACZ,EAAE,EAAE,CAAC,CAAC;CAAA;;;;;AAAC,AAKhB,OAAO,CAAC,KAAK,GAAG,UAAC,GAAG;sCAAK,UAAU;AAAV,kBAAU;;;WAC/B,UAAU,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC;eAAK,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;KAAA,CAAC;CAAA;;;;;;AAAC,AAMpD,OAAO,CAAC,OAAO,GAAG,UAAC,KAAK,EAAE,IAAI;WAC1B;2CAAI,MAAM;AAAN,kBAAM;;;eAAK,GAAG,CAAC,GAAG,MAAA,CAAP,GAAG,GAAK,KAAK,SAAK,MAAM,GAAE,IAAI,GAAC;KAAA;CAAA;;;;;;AAAC,AAMnD,OAAO,CAAC,OAAO,GAAG,UAAC,GAAG;WAClB;2CAAI,KAAK;AAAL,iBAAK;;;eAAK,GAAG,CAAC,GAAG,MAAA,CAAP,GAAG,EAAQ,KAAK,SAAE,GAAG,GAAC;KAAA;CAAA;;;;;;;;;AAAC,AASzC,OAAO,CAAC,QAAQ,GAAG,UAAC,GAAG,EAAE,CAAC;QAAE,IAAI,yDAAG,GAAG;WAClC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;CAAA;;;;;;;AAAC,AAOhD,OAAO,CAAC,OAAO,GAAG,UAAC,GAAG,EAAE,CAAC;QAAE,IAAI,yDAAG,GAAG;WACjC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;CAAA,CAAC","file":"index.js","sourcesContent":["\"use strict\";\nconst pep = require('apep');\n\nconst pep_sep = module.exports = (proto = {}) => \n    Object.create(proto, Object.getOwnPropertyNames(pep_sep)\n        .reduce((p, c) => {\n            p[c] = Object.getOwnPropertyDescriptor(pep_sep, c);\n            return p;\n        }, {}));\n\n/**\n    Run `sep` between each `generators`.\n*/\npep_sep.sepBy = (sep, ...generators) =>\n    generators.reduce((p, c) => pep.seq(p, sep, c));\n\n/**\n    Convenience function to create a combinator that runs it's input\n    generator between two generators. \n*/\npep_sep.between = (first, last) =>\n    (...middle) => pep.seq(first, ...middle, last);\n\n/**\n    Convenience function to create a combinator that runs it's input\n    generator before some end generator.\n*/\npep_sep.endWith = (end) =>\n    (...start) => pep.seq(...start, end);\n\n/**\n    Run `g` one or more times, outputting `sep` between instances.\n    \n    @param sep Separator generator run between each invocation of `g`.\n    @param g Generator.\n    @param prob Probability that many will continue to produce a value.\n*/\npep_sep.sepMany1 = (sep, g, prob = 0.5) =>\n    pep.seq(g, pep.many(pep.seq(sep, g), prob));\n\n/**\n    Run `g` zero or more times, outputting `sep` between instances.\n    \n    @see sepMany1\n*/\npep_sep.sepMany = (sep, g, prob = 0.5) =>\n    pep.opt(pep_sep.sepMany1(sep, g, prob), prob);\n"],"sourceRoot":"/source/"}